class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        // 0 to n
        int n=prices.size();
        if(n==0)
            return 0;
        int dpl[n];
        memset(dpl,0,sizeof(dpl));
        int least_so_far=prices[0];
            int maxprofit=0;
                   int maxprofit1=0;
        for(int i=1;i<n;i++)
        {
            if(prices[i]<least_so_far){
               least_so_far= prices[i];}
        
    maxprofit=prices[i]-least_so_far;
        if(dpl[i-1]<maxprofit){
        //    
            dpl[i]=maxprofit;
        }
        else{
            dpl[i]=dpl[i-1];
        }
        
        }
        int dpr[n];
          memset(dpr,0,sizeof(dpr));
        int max_so_far=prices[n-1];
        for(int i=n-2;i>=0;i--)
        {
            if(prices[i]>max_so_far)
            {
               max_so_far= prices[i];
            }
    
        maxprofit1=max_so_far-prices[i];
        if(dpr[i+1]<maxprofit1){
             dpr[i]=maxprofit1;
        }
        else{
           dpr[i]=dpr[i+1]; 
        }
        
        }
        int op=0;
        for(int i=0;i<n;i++)
        {
            if(dpl[i]+dpr[i]>op){
                op=dpl[i]+dpr[i];}
        }
        return op;
    }
};
